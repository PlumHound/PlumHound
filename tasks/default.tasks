[ "Domains", "HTMLCSV", "Domains", "MATCH (n:Domain) return n.name as Domain, n.functionallevel as FunctionalLevel, n.highvalue as HighValue, n.domain as DNS, n.distinguishedname as DN, n.domainsid as SID" ]
["Domain Trusts", "HTMLCSV", "DomainTrusts", "MATCH p=(n:Domain)-[r:TrustedBy]->(m:Domain) RETURN n.name as Domain1, r.trusttype as TrustType, r.isacl as IsACL, r.sidfiltering as SidFiltering, r.transitive as transitive,  m.name as Domain2 order by n.name, m.name"]
["Domain Controllers","HTMLCSV","DomainControllers","MATCH (c:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' RETURN c.name as Hostname, c.operatingsystem as OS, c.description as Description,toString(datetime({epochSeconds: ToInteger(coalesce(c.whencreated,0))})) as Created,c.haslaps as LAPS, c.enabled as Enabled, c.distinguishedname as DN"]
["Enterprise Admins", "HTML", "EnterpriseAdmins.html","MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-519' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation"]
["Schema Admins", "HTML", "SchemaAdmins.html", "MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-518' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation "]
["Domain Admins", "HTML", "DomainAdmins.html", "MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-512' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation "]
["Admin Groups","HTMLCSV","AdminGroups","Match (n:Group) WHERE n.name CONTAINS \'ADMIN\' return n.name as Name, n.highvalue as HighValue, n.description as Description, n.admincount as AdminCount"]
["Admin Groups Direct Polulation","HTMLCSV","AdminGroupsPopulatedCount","Match (u)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'ADMIN' return g.name as Group, g.description as Description,  Count(DISTINCT(u.name)) as Members ORDER BY Members DESC"]
["Domain Users", "HTMLCSV", "DomainUsers", "MATCH (n:User) RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Domain Computers", "HTMLCSV", "DomainComputers", "MATCH (n:Computer) RETURN n.name as Name, n.domain, n.enabled as Enabled,n.haslaps as LAPS, n.highvalue as HighValue,n.operatingsystem as OS,  n.description as Description, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon,n.serviceprincipalnames as SPN ORDER BY n.highvalue DESC , n.name ASC"]
["Domain Groups","HTMLCSV","DomainGroups","Match (n:Group) return n.name as Name, n.highvalue as HighValue, n.description as Description, n.admincount as AdminCount"]
["OUs By Computer Member Count","HTML","OUs_Count.html","MATCH (o:OU)-[:Contains]->(c:Computer) RETURN o.name as OU, o.distinguishedname as DN, COUNT(c) as Computers ORDER BY COUNT(c) DESC"]
["Cert Publishers", "HTML", "CertPublishers.html", " MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-517' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation"]
["DA Sessions","HTML","DA_Sessions.html","MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH \'-512\' MATCH p = (c:Computer)-[:HasSession]->(n) return n.name as Username, c.name as Computer"]
["EA Sessions","HTML","EA_Sessions.html","MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH \'-519\' MATCH p = (c:Computer)-[:HasSession]->(n) return n.name as Username, c.name as Computer"]
["HighValue Group Members (Limited to 1000)","HTMLCSV","Groups-HighValue-members","MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN n.name as User, m.name as Group Limit 1000"]
["Admins Without Sensitive Protection Flag", "HTMLCSV", "AdminsWithoutSensitiveFlag.html", "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) WHERE n.sensitive=false RETURN m.name as Group, n.name as User, n.displayname as DisplayName,n.description as Description, n.enabled as Enabled, n.pwdneverexpires as PWDNeverExpire, n.trustedtoauth as TrustedToAuth, n.unconstraineddelegation as UncDelegation LIMIT 1000" ]
["Kerberoastable Users","HTML","Kerberoastable_Users.html","MATCH (n:User) WHERE n.hasspn=true RETURN n.name as Username, n.displayname as DisplayName,n.description as Description, n.title as Title, n.pwdneverexpires as PasswordNeverExpires, n.passwordnotreqd as PasswordNotRequired, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPNs"]
["Pre-Windows 2000 Compatibility Access Direct Members", "HTMLCSV", "PreWindows2000.html", "MATCH p=(n:Group)<-[:MemberOf]-(m) WHERE n.objectid ENDS WITH 'S-1-5-32-554' RETURN n.domain as Domain, m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation" ]
["RDPable Servers","HTML","Workstations_RDP.html","match p=(g:Group)-[:CanRDP]->(c:Computer) where  g.objectid ENDS WITH \'-513\'  AND c.operatingsystem CONTAINS \'Server\' return c.name as Computer"]
["Domain Controller Owners","HTMLCSV","DCOwners","MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (u1)-[:Owns]->(c2:Computer) WHERE c2.name IN domainControllers RETURN  c2.name as DC, u1.name as Owner, head(labels(u1)) as Type, u1.enabled as Enabled ORDER BY DC, Owner"]
["Domain Controller Owned by Users","HTMLCSV","DCOwners-Users","MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (u1:User)-[:Owns]->(c2:Computer) WHERE c2.name IN domainControllers RETURN  c2.name as DC, u1.name as Owner, u1.enabled as Enabled ORDER BY DC, Owner"]
["Unconstrained Delegation Users with SPN","HTMLCSV","Users_UnconstrainedDelegation","MATCH (c:User {unconstraineddelegation:true}) return c.name as User, c.description as Description, c.serviceprincipalnames as SPN"]
["Unconstrained Delegation Computers with SPN","HTMLCSV","Computers_UnconstrainedDelegation","MATCH (c:Computer {unconstraineddelegation:true}) return c.name as Computer, c.description as Description, c.serviceprincipalnames as SPN"]
["Unconstrained Delegation Computers with SPN Non-DC","HTMLCSV","Computers_UnconstrainedDelegationNonDC","MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2.name as Computer, c2.description as Description, c2.operatingsystem as OS, c2.serviceprincipalnames as SPN ORDER BY c2.name ASC"]
["Constrained Delegation - All", "HTMLCSV", "ConstrainedDelegation-All", "MATCH (a)-[:AllowedToDelegate]->(b) RETURN a.name as Object, a.enabled as Enabled, head(labels(a)) as Type, b.name as Target, head(labels(b)) as TargetType" ]
["Constrained Delegation - Users", "HTMLCSV", "ConstrainedDelegation-Users", "MATCH (a:User)-[:AllowedToDelegate]->(c:Computer) RETURN a.name as User, a.enabled as Enabled, c.name as TargetComputer" ]
["Constrained Delegation - Users NonDA","HTMLCSV","ConstrainedDelegation-UsersNonDA","MATCH (u1:User)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-512' WITH COLLECT(u1.name) AS DAs MATCH (a:User)-[:AllowedToDelegate]->(c:Computer) WHERE NOT a.name IN DAs RETURN a.name as User, a.enabled as Enabled, c.name as TargetComputer"]
["Constrained Delegation - Computers NonDC", "HTMLCSV", "ConstrainedDelegation-ComputersNonDC", "MATCH (u1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(u1.name) AS DCs MATCH (a:Computer)-[:AllowedToDelegate]->(c:Computer) WHERE NOT a.name IN DCs RETURN a.name as Computer, a.enabled as Enabled, c.name as TargetComputer"]
["DCSync Direct Relationships","HTMLCSV","DCSyncDirect","MATCH (u)-[:DCSync]->(d:Domain) RETURN d.name AS Domain, u.name as Object, u.enabled as Enabled, head(labels(u)) as type ORDER BY Domain, Object"]
["DCSync Privileged Non-DCs","HTMLCSV","DCSyncDirectNonDCComputers","MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer)-[:DCSync]->(d:Domain) WHERE NOT c2.name IN domainControllers RETURN d.name AS Domain, c2.name as Computer, c2.enabled as Enabled ORDER BY Domain, Computer"]
["DCSync Privileged Non-DAs", "HTMLCSV", "DCSyncDirectNonDAUsers", "MATCH (u1:User)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-512' WITH COLLECT(u1.name) AS DAs MATCH (u2:User)-[:DCSync]->(d:Domain) WHERE NOT u2.name IN DAs RETURN d.name AS Domain, u2.name as User, u2.enabled as Enabled ORDER BY Domain, User" ]
["Permissions for Everyone and Authenticated Users","HTMLCSV","Permissions_Everyone","MATCH p=(m:Group)-[r:AddMember|AdminTo|AllExtendedRights|AllowedToDelegate|CanRDP|Contains|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|GetChanges|GetChangesAll|HasSession|Owns|ReadLAPSPassword|SQLAdmin|TrustedBy|WriteDACL|WriteOwner|AddAllowedToAct|AllowedToAct]->(t) WHERE m.objectsid ENDS WITH \'-513\' OR m.objectsid ENDS WITH \'-515\' OR m.objectsid ENDS WITH \'S-1-5-11\' OR m.objectsid ENDS WITH \'S-1-1-0\' RETURN m.name as Group,TYPE(r) as Relationship,t.name as TargetNode,t.enabledTargetEnabled"]
["Users (Non-Admin) With AddMember Group Permissions ", "HTMLCSV", "UsersnonadminAddMemberGroups", "MATCH(u:User)-[r:AddMember]->(g:Group) WHERE u.admincount = FALSE RETURN u.name as User, g.name as Group" ]
["Direct Relationships - Everyone", "HTML","Relationships-Everyone.html", "MATCH p = (g:Group)-[r]->(n) WHERE r.isacl=true AND  g.objectid ENDS WITH 'S-1-1-0'  RETURN g.name as Subject, type(r) as Relationship, n.name as Target, n.enabled as Enabled, n.unconstraineddelegation as UncDelegation, n.haslaps as LAPS, n.trustedtoauth as TrustedToAuth"]
["Direct Relationships - Authenticated Users", "HTML","Relationships-AuthenticatedUsers.html", "MATCH p = (g:Group)-[r]->(n) WHERE r.isacl=true AND  g.objectid ENDS WITH 'S-1-5-11'  RETURN g.name as Subject, type(r) as Relationship, n.name as Target, n.enabled as Enabled, n.unconstraineddelegation as UncDelegation, n.haslaps as LAPS, n.trustedtoauth as TrustedToAuth"]
["Direct Relationships - Pre-Windows 2000 Compatibility Access", "HTML","Relationships-PreW2KCA.html", "MATCH p = (g:Group)-[r]->(n) WHERE r.isacl=true AND  g.objectid ENDS WITH 'S-1-5-32-554'  RETURN g.name as Subject, type(r) as Relationship, n.name as Target, n.enabled as Enabled, n.unconstraineddelegation as UncDelegation, n.haslaps as LAPS, n.trustedtoauth as TrustedToAuth"]
["Direct Relationships - Domain Users", "HTML","Relationships-DomainUsers.html", "MATCH p = (g:Group)-[r]->(n) WHERE r.isacl=true AND  g.objectid ENDS WITH '-513'  RETURN g.name as Subject, type(r) as Relationship, n.name as Target, n.enabled as Enabled, n.unconstraineddelegation as UncDelegation, n.haslaps as LAPS, n.trustedtoauth as TrustedToAuth"]
["Direct Relationships - Domain Computers", "HTML","Relationships-DomainComputers.html", "MATCH p = (g:Group)-[r]->(n) WHERE r.isacl=true AND  g.objectid ENDS WITH '-515'  RETURN g.name as Subject, type(r) as Relationship, n.name as Target, n.enabled as Enabled, n.unconstraineddelegation as UncDelegation, n.haslaps as LAPS, n.trustedtoauth as TrustedToAuth"]
["Direct Relationships - Users", "HTML","Relationships-Users.html", "MATCH p = (g:Group)-[r]->(n) WHERE r.isacl=true AND  g.objectid ENDS WITH '-545'  RETURN g.name as Subject, type(r) as Relationship, n.name as Target, n.enabled as Enabled, n.unconstraineddelegation as UncDelegation, n.haslaps as LAPS, n.trustedtoauth as TrustedToAuth"]
["Direct Relationships - Guests", "HTML","Relationships-Guests.html", "MATCH p = (g:Group)-[r]->(n) WHERE r.isacl=true AND  g.objectid ENDS WITH '-546'  RETURN g.name as Subject, type(r) as Relationship, n.name as Target, n.enabled as Enabled, n.unconstraineddelegation as UncDelegation, n.haslaps as LAPS, n.trustedtoauth as TrustedToAuth"]
["PasswordResetter Groups Count", "HTML", "Groups_CanResetPasswordsCount.html", "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN m.name as Group, m.distinguishedname as DN, count(*) as Users ORDER BY Users DESC"]
["GPOs", "HTMLCSV", "GPOs", "Match (n:GPO) return n.name as GPO, n.highvalue as HighValue, n.gpcpath as Path" ]
["GPO Owners","HTMLCSV","GPOOwners","MATCH (u)-[:Owns]->(g:GPO) RETURN g.name AS GPO, u.name as Object, u.enabled as Enabled, head(labels(u)) as Type ORDER BY GPO, Object"]
["GPO Owners - Non-DAs", "HTMLCSV", "GPOOwnersNonDA", "MATCH (u1:User)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-512' WITH COLLECT(u1.name) AS DAs MATCH (u2:User)-[:Owns]->(gp:GPO) WHERE NOT u2.name IN DAs  RETURN gp.name AS GPO, u2.name as Owner, u2.enabled as Enabled ORDER BY GPO, Owner" ]
["GPOS - Non-DA Users With Interesting GPO Permissions", "HTMLCSV", "GPOs-NonDAUsersWithInterestingPermissions", "MATCH (u1:User)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-512' WITH COLLECT(u1.name) AS DAs MATCH (u2:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner]->(g:GPO) WHERE NOT u2.name in DAs RETURN u2.name as User, type(r) as Relationship, g.name as GPO" ]
["RDPable Groups", "HTML", "RDPableGroups.html", "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN m.name as Group, n.name as Computer ORDER BY m.name" ]
["GPO Creator Owners", "HTML", "GPOCreatorOwners.html", "MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-520' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation " ]
["RDPable Groups Count", "HTML", "RDPableGroupsCount.html", "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN m.name as Group, count(*) as Computer ORDER BY Computer DESC" ]
["Local AdminGroups", "HTML", "LocalAdmin_Groups.html", "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN m.name as Group, n.name as Computer ORDER BY m.name" ]
["Local AdminGroups Count", "HTML", "LocalAdmin_Groups_Count.html", "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN m.name as Group, count(*) as Computer ORDER BY Computer DESC"]
["Local AdminUsers","HTML","LocalAdmin_Users.html","MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN m.name as User, n.name as Computer ORDER BY m.name"]
["Local AdminUsers Count","HTML","LocalAdmin_UsersCount.html","MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN m.name as User, count(*) as Computer ORDER BY Computer DESC" ]
["Servers in OUs","HTML","ServersInOUs.html","MATCH (o:OU)-[:Contains]->(c:Computer) WHERE toUpper(c.operatingsystem) STARTS WITH 'WINDOWS SERVER' RETURN o.name as OU,c.name as Computer,c.operatingsystem as OS"]
["Computers with MSSQL SPN","HTMLCSV","Computers_MSSQL","MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c.name as Computer, c.enabled as Enabled, c.serviceprincipalnames as SPN ORDER BY c.name ASC"]
["Computers Admin of Computers","HTMLCSV","Computers_admin_computers","MATCH p=(m:Computer {enabled: True})-[r1:MemberOf*0..]->(g)-[r2:AdminTo*1..]->(n:Computer) WHERE n <> m RETURN m.name as Computer, n.name as TargetComputer"]
["Computers Admin of Computers Count","HTML","Computers_admin_computers_count.html","MATCH p=(m:Computer {enabled: True})-[r1:MemberOf*0..]->(g)-[r2:AdminTo*1..]->(n:Computer) WHERE n <> m RETURN m.name as Computer, COUNT(n) as TargetComputerCount"]
["Computers with Descriptions","HTMLCSV","Computers_WithDescriptions","MATCH (c:Computer) WHERE c.description IS NOT NULL RETURN c.name as Computer,c.description as Description"]
["Computers Vulnerable to Local Admin Enumeration","HTMLCSV","Computers_With_More_Than1_Local_Admin","MATCH p=()-[:AdminTo]->(n:Computer) RETURN n.name as Host, n.operatingsystem as OS"]
["Operating Systems Unsupported","HTMLCSV","OperatingSystemUnsupported","MATCH (c:Computer) WHERE c.operatingsystem =~ '.*(2000|2003|2008|xp|vista|7|me).*' RETURN c.name as Computer, c.operatingsystem as UnsupportedOS, c.enabled as Enabled"]
["Operating Systems Count","HTML","OperatingSystemCount.html","MATCH (c:Computer) RETURN c.operatingsystem aS OS, count(*) as Computers ORDER BY Computers DESC"]
["LAPS Deployment Count","HTMLCSV","LapsDeploymentCount","MATCH (c:Computer) RETURN c.haslaps as LAPSEnabled, count(*) as Computers ORDER BY Computers DESC"]
["LAPS Deployment OS Count","HTMLCSV","LapsDeploymentCount-OS","MATCH (c:Computer) RETURN c.haslaps as LAPSEnabled, c.operatingsystem as OS, count(*) as Computers ORDER BY LAPSEnabled DESC, Computers DESC"]
["LAPS Not Enabled","HTML","LAPSNotEnabled.html","MATCH (c:Computer) WHERE c.haslaps=false RETURN c.name as Computer, c.enabled as Enabled, c.operatingsystem as OS, c.description as Descirption ORDER BY Computer"]
["Users Sessions", "HTMLCSV", "Users_Sessions", "MATCH p=(n:User)--(c:Computer)-[:HasSession]->(n) return n.name as User,  c.name as Computer ORDER BY n.name"]
["Users Sessions Count", "HTML", "Users_Sessions_Count.html", "MATCH p=(n:User)--(c:Computer)-[:HasSession]->(n) return n.name as User, count(*) as Computers ORDER BY Computers DESC"]
["Users With 6 Month Old Passwords","HTMLCSV","Users_6MoOldPasswords","WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.pwdlastset) > 15552000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"]
["Users With 5 Year Old Passwords","HTMLCSV","Users_5YrOldPasswords","WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.pwdlastset) > 157680000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"]
["Users With 10 Year Old Passwords","HTMLCSV","Users_10YrOldPasswords","WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.pwdlastset) > 315360000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"]
["Users Password Not Required", "HTML", "Users_PasswordNotRequired.html", "MATCH (n:User) where n.passwordnotreqd = True RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon"]
["Users With Userpassword Attribute", "HTMLCSV", "Users_userpassword", "MATCH (u:User) WHERE NOT u.userpassword IS null RETURN u.name as User, u.userpassword as Password, u.enabled as Enabled"]
["User No Kerb Needed (AS-REP Roastable Users)","HTMLCSV","Users_NoKerbReq","MATCH (n:User {dontreqpreauth: true}) RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.title as Title, n.pwdneverexpires as PasswordNeverExpires, n.passwordnotreqd as PasswordNotRequired, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPNs"]
["Users Computer Direct Admin Count","HTML","Users_Count_DirectAdminComputers.html","MATCH (u:User)-[:AdminTo]->(c:Computer) RETURN count(DISTINCT(c.name)) AS COMPUTER, u.name AS USER ORDER BY count(DISTINCT(c.name)) DESC"]
["Users Not Active 6 Months", "HTMLCSV", "UsersNotActive6mo", "WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.lastlogontimestamp) > 15552000 AND n.lastlogontimestamp<>-1.0 RETURN n.name as Username, n.displayname as DisplayName, n.enabled as Enabled, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogontimestamp,0))})) as LastLogon ORDER BY LastLogon" ]
["Users Not Active 12 Months", "HTMLCSV", "UsersNotActive12mo", "WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.lastlogontimestamp) > 31104000 AND n.lastlogontimestamp<>-1.0 RETURN n.name as Username, n.displayname as DisplayName, n.enabled as Enabled, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogontimestamp,0))})) as LastLogon ORDER BY LastLogon" ]
["Users Not Active 60 Months", "HTMLCSV", "UsersNotActive60mo", "WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.lastlogontimestamp) > 155520000 AND n.lastlogontimestamp<>-1.0 RETURN n.name as Username, n.displayname as DisplayName, n.enabled as Enabled, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogontimestamp,0))})) as LastLogon ORDER BY LastLogon" ]
["Users Not Active 120 Months", "HTMLCSV", "UsersNotActive120mo", "WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.lastlogontimestamp) > 311040000 AND n.lastlogontimestamp<>-1.0 RETURN n.name as Username, n.displayname as DisplayName, n.enabled as Enabled, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogontimestamp,0))})) as LastLogon ORDER BY LastLogon" ]
["Users Never Active","HTMLCSV","Users_NeverActive_Enabled","MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n.name as Username ORDER BY n.name"]
["Users Password Never Expires Exception", "HTMLCSV", "Users_NeverExpirePasswords", "MATCH (n:User) WHERE n.pwdneverexpires RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Hunt - Users with Pass or PW in Description", "HTML", "HuntUsersWithPassInDescription.html", "MATCH (n:User) WHERE n.description  =~ '(?i).*(pass|pw).*' RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Hunt - Users with Change in Description", "HTML", "HuntUsersWithChangeInDescription.html", "MATCH (n:User) WHERE n.description  =~ '(?i).*(change).*' RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Hunt - Users with VPN Group", "HTML", "HuntUsersWithVPNGroup.html", "Match (u:User)-[:MemberOf*]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return u.name as User, g.name as Group" ]
["Hunt - Computers with Pass or PW in Description", "HTML", "HuntComputersWithPassInDescription.html", "MATCH (n:Computer) WHERE n.description =~ '(?i).*(pass|pw).*' RETURN n.name as Name, n.domain, n.enabled as Enabled,n.haslaps as LAPS, n.highvalue as HighValue,n.operatingsystem as OS,  n.description as Description, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon,n.serviceprincipalnames as SPN ORDER BY n.highvalue DESC , n.name ASC"]
["Owned Groups","HTML","Owned-Groups.html","Match (n:Group) where n.owned=TRUE return n.name as Name, n.highvalue as HighValue, n.description as Description"]
["Owned Users", "HTML", "Owned-Users.html", "MATCH (n:User) WHERE n.owned=TRUE RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Owned Computers", "HTML", "Owned-Computers.html", "MATCH (n:Computer) where n.owned=TRUE RETURN n.name as Name, n.domain, n.enabled as Enabled,n.haslaps as LAPS, n.highvalue as HighValue,n.operatingsystem as OS,  n.description as Description, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon,n.serviceprincipalnames as SPN ORDER BY n.highvalue DESC , n.name ASC"]
["Owned Users Groups", "HTML", "Owned-Users-Groups.html", "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN m.name, n.name ORDER BY m.name"]
["Owned Computers Groups", "HTML", "Owned-Computers-Groups.html", "MATCH (m:Computer) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN m.name, n.name ORDER BY m.name"]
["Owned Objects", "HTML", "Owned-Objects.html", "MATCH (n {owned:true}) return n.name as Name, n.highvalue as HighValue, n.enabled as Enabled, n.trustedtoauth as TrustedToAuth, n.unconstraineddelegation as UncDelegation, n.serviceprincipalnames as SPN"]
["Owned Objects Admin To", "HTML", "Owned-Objects-AdminTo-Direct.html", "MATCH (n {owned:true})-[r:AdminTo]->(c:computer) return n.name as Name, n.highvalue as HighValue, n.enabled as Enabled, c.name as Computer, c.highvalue as ComputerHighValue, c.enabled as ComputerEnabled, c.serviceprincipalname as ComputerSPN"]
["Owned Objects Member Of", "HTML", "Owned-Objects-MemberOf-Direct.html", "MATCH (n {owned:true})-[r:MemberOf]->(g:Group) return n.name as Name, n.highvalue as HighValue, n.enabled as Enabled, g.name as GroupName, g.description as GroupDescription"]
["Certificate Templates", "HTMLCSV", "CertificateTemplates", "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n.`Display Name` as Name, n.highvalue as HighValue, n.Enabled as Enabled, n.`Enrollee Supplies Subject` as EnroleeSuppliesSjb, n.domain as Domain, n.`Extended Key Usage` as `Key Usage`" ]
["Certificate Authorities", "HTMLCSV", "CertificateAuthorties", "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n.`DNS Name` as DNS, n.`CA Name` as Name, n.domain as Domain, n.`Web Enrollment` as `Web Enrollment`" ]
["Certificate Enrollment Rights", "HTMLCSV", "CertificateTemplateEnrollRights", "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO) WHERE n.type = 'Certificate Template' return n.`Display Name` as Template, n.Enabled as Enabled, g.name as `Enrollment Rights`" ]
["Certificate Template ESC1 Vuln", "HTMLCSV", "CertificateTemplates_ESC1", "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs" ]
["Certificate Template ESC2 Vuln", "HTMLCSV", "CertificateTemplates_ESC2", "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs" ]
["Certificate Template ESC3 Vuln", "HTMLCSV", "CertificateTemplates_ESC3", "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs" ]
["Certificate Template ESC6 Vuln", "HTMLCSV", "CertificateTemplates_ESC6", "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs" ]
["Certificate Template ESC8 Vuln", "HTMLCSV", "CertificateTemplates_ESC8", "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n.`Display Name` as `Display Name`, n.`Template Name` as Name, n.domain as Domain, n.`Certificate Authorities` as CAs" ]
["Report Index","HTML","index.html","REPORT-INDEX"]
[ "Zip Tasks", "ZIP", "Reports.zip", "ZIP-TASKS" ]
