[ "Domains", "HTML", "Domains.html", "MATCH (n:Domain) return n.name as Domain, n.functionallevel as FunctionalLevel, n.highvalue as HighValue, n.domain as DNS" ]
["Domain Trusts", "HTML", "DomainTrusts.html", "MATCH p=(n:Domain)-[r:TrustedBy]->(m:Domain) RETURN n.name as Domain1, r.trusttype as TrustType, r.isacl as IsACL, r.sidfiltering as SidFiltering, r.transitive as transitive,  m.name as Domain2 order by n.name, m.name"]
["Domain Controllers","HTML","DomainControllers.html","MATCH (c:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' RETURN c.name as Hostname, c.operatingsystem as OS, c.description as Description, c.whencreated as Created,c.haslaps as LAPS, c.enabled as Enabled"]
["Enterprise Admins", "HTML", "EnterpriseAdmins.html","MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-519' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation"]
["Schema Admins", "HTML", "SchemaAdmins.html", "MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-518' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation "]
["Domain Admins", "HTML", "DomainAdmins.html", "MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-512' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation "]
["Cert Publishers", "HTML", "CertPublishers.html", " MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-517' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation"]
["DA Sessions","HTML","DA_Sessions.html","MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH \'-512\' MATCH p = (c:Computer)-[:HasSession]->(n) return n.name as Username, c.name as Computer"]
["EA Sessions","HTML","EA_Sessions.html","MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH \'-519\' MATCH p = (c:Computer)-[:HasSession]->(n) return n.name as Username, c.name as Computer"]
["Kerberoastable Users","HTML","Kerberoastable_Users.html","MATCH (n:User) WHERE n.hasspn=true RETURN n.name as Username, n.displayname as DisplayName,n.description as Description, n.title as Title, n.pwdneverexpires as PasswordNeverExpires, n.passwordnotreqd as PasswordNotRequired, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPNs"]
["Unconstrained Delegation Computers with SPN Non-DC","HTML","Computers_UnconstrainedDelegationNonDC.html","MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2.name as Computer, c2.description as Description, c2.operatingsystem as OS, c2.serviceprincipalnames as SPN ORDER BY c2.name ASC"]
["PasswordResetter Groups Count", "HTML", "Groups_CanResetPasswordsCount.html", "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN m.name as Group, count(*) as Users ORDER BY Users DESC"]
["GPO Creator Owners", "HTML", "GPOCreatorOwners.html", "MATCH p=(n:Group)<-[:MemberOf*1..]-(m) WHERE n.objectid =~ '(?i)S-1-5-.*-520' RETURN m.name as Name, m.displayname as DisplayName,m.description as Description, m.enabled as Enabled, m.pwdneverexpires as PWDNeverExpire, m.trustedtoauth as TrustedToAuth, m.unconstraineddelegation as UncDelegation "]
["Computers with MSSQL SPN","HTML","Computers_MSSQL.html","MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c.name as Computer, c.enabled as Enabled, c.serviceprincipalnames as SPN ORDER BY c.name ASC"]
["LAPS Not Enabled","HTML","LAPSNotEnabled.html","MATCH (c:Computer) WHERE c.haslaps=false RETURN c.name as Computer, c.enabled as Enabled, c.operatingsystem as OS, c.description as Descirption ORDER BY Computer"]
["Operating Systems Unsupported","HTML","OperatingSystemUnsupported.html","MATCH (c:Computer) WHERE c.operatingsystem =~ '.*(2000|2003|2008|xp|vista|7|me).*' RETURN c.name as Computer, c.operatingsystem as UnsupportedOS, c.enabled as Enabled"]
["Users With 5 Year Old Passwords","HTML","Users_5YrOldPasswords.html","WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.pwdlastset) > 157680000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"]
["Users With 10 Year Old Passwords","HTML","Users_10YrOldPasswords.html","WITH timestamp() / 1000 AS date_now MATCH (n:User) WHERE date_now - toInteger(n.pwdlastset) > 315360000 AND n.pwdlastset<>-1.0  AND n.pwdlastset<>0.0 RETURN n.name as Username, n.displayname as DisplayName, n.description as Description, n.enabled as Enabled, n.admincount as AdminCount, n.pwdneverexpires as PassNeverExpire, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon ORDER BY n.pwdlastset"]
["Users With Userpassword Attribute", "HTML", "Users_userpassword.html", "MATCH (u:User) WHERE NOT u.userpassword IS null RETURN u.name as User, u.userpassword as Password, u.enabled as Enabled"]
["Users Password Never Expires Exception", "HTML", "Users_NeverExpirePasswords.html", "MATCH (n:User) WHERE n.pwdneverexpires RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Non-Admins with Add To Group Delegation (Limited to 10000)", "HTML", "User-AddToGroupDelegation.html", "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN n.name as User, m.name as Group Limit 10000" ]
["Non-Admins with Add To Group Delegation Count (Limited to 1000)", "HTML", "User-AddToGroupDelegation.html", "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN n.name as User, count(m.name) as Groups Limit 1000" ]
["Owned Groups","HTML","Owned-Groups.html","Match (n:Group) where n.owned=TRUE return n.name as Name, n.highvalue as HighValue, n.description as Description"]
["Owned Users", "HTML", "Owned-Users.html", "MATCH (n:User) WHERE n.owned=TRUE RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Owned Computers", "HTML", "Owned-Computers.html", "MATCH (n:Computer) where n.owned=TRUE RETURN n.name as Name, n.domain, n.enabled as Enabled,n.haslaps as LAPS, n.highvalue as HighValue,n.operatingsystem as OS,  n.description as Description, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon,n.serviceprincipalnames as SPN ORDER BY n.highvalue DESC , n.name ASC"]
["Owned Users Groups", "HTML", "Owned-Users-Groups.html", "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN m.name, n.name ORDER BY m.name"]
["Owned Computers Groups", "HTML", "Owned-Computers-Groups.html", "MATCH (m:Computer) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN m.name, n.name ORDER BY m.name"]
["Owned Objects", "HTML", "Owned-Objects.html", "MATCH (n {owned:true}) return n.name as Name, n.highvalue as HighValue, n.enabled as Enabled, n.trustedtoauth as TrustedToAuth, n.unconstraineddelegation as UncDelegation, n.serviceprincipalnames as SPN"]
["Owned Objects Admin To", "HTML", "Owned-Objects-AdminTo-Direct.html", "MATCH (n {owned:true})-[r:AdminTo]->(c:computer) return n.name as Name, n.highvalue as HighValue, n.enabled as Enabled, c.name as Computer, c.highvalue as ComputerHighValue, c.enabled as ComputerEnabled, c.serviceprincipalname as ComputerSPN"]
["Owned Objects Member Of", "HTML", "Owned-Objects-MemberOf-Direct.html", "MATCH (n {owned:true})-[r:MemberOf]->(g:Group) return n.name as Name, n.highvalue as HighValue, n.enabled as Enabled, g.name as GroupName, g.description as GroupDescription"]
["Hunt - Users with Pass or PW in Description", "HTML", "HuntUsersWithPassInDescription.html", "MATCH (n:User) WHERE n.description  =~ '(?i).*(pass|pw).*' RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Hunt - Users with Change in Description", "HTML", "HuntUsersWithPassInDescription.html", "MATCH (n:User) WHERE n.description  =~ '(?i).*(change).*' RETURN n.name as Name,n.displayname as DisplayName,n.enabled as Enabled, n.highvalue as HighValue,  n.description as Description, n.title as Title, n.pwdneverexpires as PWDNeverExpires, n.passwordnotreqd as PWDNotReqd, n.sensitive as Sensitive, n.admincount as AdminCount, n.serviceprincipalnames as SPN, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon" ]
["Hunt - Computers with Pass or PW in Description", "HTML", "HuntComputersWithPassInDescription.html", "MATCH (n:Computer) WHERE n.description =~ '(?i).*(pass|pw).*' RETURN n.name as Name, n.domain, n.enabled as Enabled,n.haslaps as LAPS, n.highvalue as HighValue,n.operatingsystem as OS,  n.description as Description, toString(datetime({epochSeconds: ToInteger(coalesce(n.pwdlastset,0))})) as PWDLastSet, toString(datetime({epochSeconds: ToInteger(coalesce(n.lastlogon,0))})) as LastLogon,n.serviceprincipalnames as SPN ORDER BY n.highvalue DESC , n.name ASC"]
["Report Index","HTML","index.html","REPORT-INDEX"]